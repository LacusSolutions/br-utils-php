name: Sync Release Tags

on:
  schedule:
    - cron: "0 10 * * *" # Runs every day at 10:00 UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  check-releases:
    name: Check and Sync Releases tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - id: releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching recent releases from GitHub API..."
          curl -s -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases?per_page=50" > releases.json

          # filter releases from the last 24 hours
          jq -r --arg cutoff "$(date -u -d '24 hours ago' +%Y-%m-%dT%H:%M:%SZ)" \
            '.[] | select(.published_at and (.published_at > $cutoff)) | .tag_name' releases.json > new_tags.txt

          if [ ! -s new_tags.txt ]; then
            echo "‚úÖ No new releases found in the last 24 hours."
            exit 0
          fi

          echo "üöÄ Found new tags to sync:"
          cat new_tags.txt

      - if: success()
        run: |
          while read TAG_NAME; do
            if [[ "$TAG_NAME" != lacus/*@* ]]; then
              echo "‚ùå Tag $TAG_NAME does not match the expected format: 'lacus/<package-name>@<version>'"
              continue
            fi

            PACKAGE_NAME=${TAG_NAME#lacus/*}
            PACKAGE_NAME=${PACKAGE_NAME%@*}
            PACKAGE_VERSION=${TAG_NAME#*$PACKAGE_NAME@}
            REMOTE_URL="git@github.com:LacusSolutions/br-utils-php_${PACKAGE_NAME}.git"

            echo "---------------------------------------------"
            echo "üì¶ Syncing $TAG_NAME ‚Üí $REMOTE_URL"
            echo "---------------------------------------------"
            echo "Tag name:     $TAG_NAME"
            echo "Package name: $PACKAGE_NAME"
            echo "Version:      $PACKAGE_VERSION"
            echo "Remote URL:   $REMOTE_URL"
            echo ""

            if ! git ls-remote "$REMOTE_URL" &> /dev/null; then
              echo "     ‚ùå Remote repository not found: $REMOTE_URL"
              echo ""
              echo ""
              continue
            fi

            git fetch --tags
            git remote add remote-repo-$PACKAGE_NAME "$REMOTE_URL" || true
            git tag "$PACKAGE_VERSION" "refs/tags/$TAG_NAME" -f
            git push remote-repo-$PACKAGE_NAME "refs/tags/$PACKAGE_VERSION" --force --quiet

            echo "     ‚úÖ Pushed tag $PACKAGE_VERSION to remote repository"
            echo ""
            echo ""
          done < new_tags.txt
